
	$Id$

Updated for version 3.5.0

Installing the OPeNDAP Matlab client

This version of loaddap has been tested with Matlab 7. It may build with 
versions as old as Matlab 5, but that has not been tested. You must use
the -nojvm option to matlab to use loaddap on certain patforms such as
Mac OS/X. 

Note to maintainers: 'make dist' works but 'make distcheck' fails because
mex does not find the source files.

---------------------------------------------------------------------------

BUILDING THE SOFTWARE
REQUIREMENTS
NOTES

---------------------------------------------------------------------------

BUILDING THE SOFTWARE

  To build the OPeNDAP Matlab Client follow these steps:

  0. Please skim REQUIREMENTS and NOTES sections of this file
     before reporting problems. Thanks.

  1. Type `./configure' at the system prompt. On some systems you may have
     to type `sh configure'.

  2. Type `make' to build the clien, `make check' to run the tests. You
     must have DejaGNU to run `make check.' 

  4. If you have the DejaGNU test software installed, you can type `make
     check' to test the writedap program. To test loaddap, run matlab and
     type `test_loaddap'.  You should see messsages about various tests and
     the word `PASS' for each of them.  If a test does not pass, contact the
     OPeNDAP support center:

       support@unidata.ucar.edu

  3. Type `make install' to install the client binary and it's helper 
     programs. By default the stofware installs in /usr/local/bin and 
     /usr/local/share/loaddap. Make sure that both of these directories
     are on you matlabpath. To change the root directory from /usr/local
     to something else, use the --prefix option of configure.

  SGI Note:
     If you are building on an SGI machine, it is possible that your build
     of loaddods.mex* will fail due to architecture incompatibilities.
     See our "How do I build the Matlab server and client on SGI?" FAQ
     for details on how to complete the build:
   
       http://opendap.org/faq/index.html#sgiMatlab

Building from Our SVN Repository

  If you are building from a SVN checkout, run 'autoreconf --verbose' before
  './configure; make'. If you try to run autoconf, et c., by hand and wind up
  with build files that don't work, use 'autoreconf --force --verbose' and
  then './configure;make'.

REQUIREMENTS

  o To build from a fresh SVN checkout, you'll need automake 1.9.2, autoconf
    2.59 (2.57 will probably work and that's what's listed in the configure.ac
    file) and libtool 1.5.6. Earlier versions may work, but may cause
    problems, particularly with the 'distcheck' target for make. Given those
    requirements, use 'autoreconf --force --verbose' and then build as
    described above.
    
    If you're building on Mac OS/X 10.4 (Tiger), you will need to install
    all three of these tools before building even though OS/X includes them.

  o The software requires libdap 3.5.2 or newer.
  
  o We test loaddap using Matlab 7 although it's possible the software will
    work with Matlab 5 or 6. The $MATLAB/bin directory must be on your path
    or given to configure using the --with-matlab option.

  o You should have gcc/g++ 2.95.x or greater. You'll also need to get the
    stdc++ library that matches the compiler (whatever version). NB: gcc
    2.8.x and earlier *won't* build the software. We're working on modifying
    the software so that it will build with a variety of compilers. As of
    01/22/03 we have built the code using Microsoft's Visual C++ 6.0 and GNU
    gcc/++ 3.2.1, 3.3, 3.4 and 4.0

NOTES

  o If you are building on a new platform (one for which we don't supply
    binaries), please run the tests and tell us about any failures. To do a
    really complete job of this you'll need to get the GNU test system called
    DejaGNU and the CppUnit unit testing package. It is very simple to
    install these and we're very willing to help, so don't be shy!

  o To build a rpm file for a source or binary distribution: 1) Use 'make
    dist' to build a tar.gz file; and 2) Use 'make srpm' and 'make rpm' to
    build the binary distributions. You may have to to be root to do
    this, depending on how RPM is set up for you.

  o To build a Mac OS/X package, use the 'pkg' target of the Makfile
    and then start PackageMaker and open loaddap_osx_package.pmsp.
    Make sure to update Welcome.html, ReadMe.txt and License.txt. Note
    that those files can be edited fairly easily in emacs using
    set-fill-column 55. If they are wider than 55 columns they look
    awful.

  o DEBUGGING AIDS

    - The software uses the following debugging aids that may be of help
      to you in developing new OPeNDAP applications.

    - DBG: simple program instrumentation -- see the file defines.h.

    - DBG2: more elaborate program instrumentation -- by convention this is
      used for output that is half a page or more, while DEBUG is used for
      single line output.

    - In the past we used efence and dbnew to help debug dynamic memory
      programming errors. We are now using valgrind and suggest you do the
      same. On some Linux platforms you should export MALLOC_CHECK_=0 in the
      shell before running valgrind. This is true for the unit tests and may
      be true for other code. You'll also notice that the Makefile contains
      CXX and C compile-time flags for debugging. These will greatly simplify
      using valgrind and/or a debugger. To use these, don't hack up the
      Makefile.am. Instead export CXXFLAGS with the values you want and then
      run configure. For example:

	  export CXXFLAGS="-g3 -O0 -Wall -fno-defer-pop"; ./configure

    - To build with program instrumentation use `--enable-debug=<level>'
      where <level> is 1 or 2.

  