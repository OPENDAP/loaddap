
	$Id$

This file describes the output format of the ASCII filter for DODS servers.
The ASCII filters for DODS servers (analogous to the DDS or Data filters) are
built by running the data filter, writeval and a Perl program called
DODS_Ascii.pl in a pipe. 

writeval can either read from its standard input or by dereferencing a URL.
When it reads from stdin the data stream must be the output of one of the
DODS server data filters. 

writeval can be used to produce ASCII output using the -a flag.

The Perl script DODS_Ascii.pl actually formats the output seen by the
user/browser. For each datatype:

<type>: <simple type> | <list> | <array> | <structure> | <sequence>

<Simple type>: <name> , <value> \n

<list>: <name> , (<value> ,)+ <value> \n

<array>: (<name> <index list> <row values> \n)+
<index list>: [<dim 0>]...[<dim n-1>],
<row values>: val0, ..., val n-1

** Examples of what the array output looks like:

   Given Int32 a[10];
   a, <val [0]>, ..., <val [9]>

   Given Int32 b[10][10];
   b[0], <val [0][0]>, <val [0][1]>, ..., <val [0][9]>
   b[1], <val [1][0]>, <val [1][1]>, ..., <val [1][9]>
   .
   .
   .
   b[9], <val [9][0]>, <val [9][1]>, ..., <val [9][9]>

   This means that it is hard to tell a single dimension array from a list,
   but that values are comma separated and should be fairly easy to read
   into Excel.

** I think that we should deal with ctor types which contain other ctors
   specially. For example, a structure which contains only simple types
   should probably be output on a single line. But a structure with an array
   in it should be output with each element on its own row(s).

<structure>: <simple structure> | <flattened structure> | <complex structure>
<simple structure>: <simple type>+ \n
<flattened structure>: <simple type>+ \n
<complex structure>: (<type> \n)+

** I think that the sequence type should be handled like the structure type
   above with the provision that nested sequences be flattened.

<sequence>: <simple sequence> | <flattened sequence> | <complex sequence>
<simple sequence>: (<element name>, )+ \n (<element value>, \n)+
<flattened sequence>: (<element name>, )+ \n (<element value>, \n)+
<complex sequence>: (<element name>, <element value> \n)+

** Functions are to be removed in version 2.2

<function>: 

** Grids will be printed as structures of arrays.

<grid>: 